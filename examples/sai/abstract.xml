<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>/*
The system is modelled as a ring network of AI machines.
Protocol for each honest AI agent consists of three phases:
data gathering, learning and sharing.
During data gathering agent collects data required for the 
learning phase. Depending on the amount of collected data, 
it is marked as incomplete, complete or excessive.
Learning phase may result with internal AI component being
overtrained, undertrained or properly trained, depending on
the number of learning iterations and amount of data collected.
During the sharing phase each agent receives AI component from
agent with previous ID and sends its model to the agent with next ID
(modulo number of agents). Upon the receiving of a component 
agent merges it with its own. To avoid potential deadlocks, 
sharing is always initiated by agents with even ID.
*/

const int NA=6;         // number of agents

int[0,NA] impersonated; // impersonated agent

chan share[NA+1][NA+1];
int[0,3] shqual;</declaration>
	<template>
		<name>Impersonator</name>
		<declaration>// int quality;
int[0,NA] snd;
int[0,NA] rcv;
		</declaration>
		<location id="id0" x="0" y="0">
			<name x="-10" y="-30">id0</name>
		</location>
		<location id="id1" x="204" y="0">
			<name x="194" y="-30">id1</name>
		</location>
		<location id="id2" x="-170" y="0">
			<name x="-180" y="-30">id2</name>
		</location>
		<location id="id3" x="408" y="0">
			<name x="398" y="-30">id3</name>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="select" x="42" y="-45">fqual:int[0,2]</label>
			<label kind="guard" x="42" y="-30">impersonated%2==0 &amp;&amp; fqual!=2</label>
			<label kind="synchronisation" x="42" y="-15">share[impersonated][1+impersonated%NA]!</label>
			<label kind="assignment" x="42" y="0">shqual=fqual</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="246" y="-30">impersonated%2==0</label>
			<label kind="synchronisation" x="246" y="-15">share[1+(NA+impersonated-2)%NA][impersonated]?</label>
			<label kind="assignment" x="246" y="0">shqual=0</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="select" x="246" y="-45">fqual:int[0,2]</label>
			<label kind="guard" x="246" y="-30">impersonated%2==1 &amp;&amp; fqual!=2</label>
			<label kind="synchronisation" x="246" y="-15">share[impersonated][1+impersonated%NA]!</label>
			<label kind="assignment" x="246" y="0">shqual=fqual</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="select" x="-145" y="-45">i:int[1,NA]</label>
			<label kind="assignment" x="-145" y="0">impersonated=i</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="42" y="-30">impersonated%2==1</label>
			<label kind="synchronisation" x="42" y="-15">share[1+(NA+impersonated-2)%NA][impersonated]?</label>
			<label kind="assignment" x="42" y="0">shqual=0</label>
		</transition>
	</template>
	<template>
		<name>AI</name>
		<parameter>int[1,NA] id</parameter>
		<declaration>// Place local declarations here.

int data;
int completion;
int mstatus;
int[0,3] mqual;
int info;
const int __d_at_id4_of_data[3] = {0,1,2};
const int __d_at_id4_of_completion[3] = {0,0,0};
const int __d_at_id4_of_info[3] = {0,0,0};
const int __d_at_id4_of_mstatus[3] = {0,0,0};
const int __d_at_id5_of_data[2] = {0,0};
const int __d_at_id5_of_completion[2] = {0,1};
const int __d_at_id5_of_info[2] = {0,0};
const int __d_at_id5_of_mstatus[2] = {0,0};
const int __d_at_id6_of_data[1] = {0};
const int __d_at_id6_of_completion[1] = {0};
const int __d_at_id6_of_info[1] = {0};
const int __d_at_id6_of_mstatus[1] = {0};
const int __d_at_id7_of_data[14] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0};
const int __d_at_id7_of_completion[14] = {0,1,1,1,1,0,1,1,1,1,1,1,1,1};
const int __d_at_id7_of_info[14] = {0,0,1,2,0,0,0,0,1,1,1,2,2,2};
const int __d_at_id7_of_mstatus[14] = {0,0,0,0,2,1,1,3,2,1,3,2,1,3};
const int __d_at_id8_of_data[4] = {0,0,0,0};
const int __d_at_id8_of_completion[4] = {1,0,1,1};
const int __d_at_id8_of_info[4] = {0,0,0,0};
const int __d_at_id8_of_mstatus[4] = {2,1,1,3};
const int __d_at_id9_of_data[6] = {0,0,0,0,0,0};
const int __d_at_id9_of_completion[6] = {0,1,1,0,1,1};
const int __d_at_id9_of_info[6] = {0,0,0,0,0,0};
const int __d_at_id9_of_mstatus[6] = {0,0,2,1,1,3};
const int __d_at_id10_of_data[6] = {0,0,0,0,0,0};
const int __d_at_id10_of_completion[6] = {0,1,1,0,1,1};
const int __d_at_id10_of_info[6] = {0,0,0,0,0,0};
const int __d_at_id10_of_mstatus[6] = {0,0,2,1,1,3};
const int __d_at_id11_of_data[6] = {0,0,0,0,0,0};
const int __d_at_id11_of_completion[6] = {0,1,1,0,1,1};
const int __d_at_id11_of_info[6] = {0,0,0,0,0,0};
const int __d_at_id11_of_mstatus[6] = {0,0,2,1,1,3};
const int __d_at_id12_of_data[6] = {0,0,0,0,0,0};
const int __d_at_id12_of_completion[6] = {0,1,1,0,1,1};
const int __d_at_id12_of_info[6] = {0,0,0,0,0,0};
const int __d_at_id12_of_mstatus[6] = {0,0,2,1,1,3};
const int __init_data = 0;
const int __init_completion = 0;
const int __init_info = 0;
const int __init_mstatus = 0;
void __assume_at_id4_of_data(int _){
	data = __d_at_id4_of_data[_];
}
void __assume_at_id4_of_completion(int _){
	completion = __d_at_id4_of_completion[_];
}
void __assume_at_id4_of_info(int _){
	info = __d_at_id4_of_info[_];
}
void __assume_at_id4_of_mstatus(int _){
	mstatus = __d_at_id4_of_mstatus[_];
}
void __assume_at_id5_of_data(int _){
	data = __d_at_id5_of_data[_];
}
void __assume_at_id5_of_completion(int _){
	completion = __d_at_id5_of_completion[_];
}
void __assume_at_id5_of_info(int _){
	info = __d_at_id5_of_info[_];
}
void __assume_at_id5_of_mstatus(int _){
	mstatus = __d_at_id5_of_mstatus[_];
}
void __assume_at_id6_of_data(int _){
	data = __d_at_id6_of_data[_];
}
void __assume_at_id6_of_completion(int _){
	completion = __d_at_id6_of_completion[_];
}
void __assume_at_id6_of_info(int _){
	info = __d_at_id6_of_info[_];
}
void __assume_at_id6_of_mstatus(int _){
	mstatus = __d_at_id6_of_mstatus[_];
}
void __assume_at_id7_of_data(int _){
	data = __d_at_id7_of_data[_];
}
void __assume_at_id7_of_completion(int _){
	completion = __d_at_id7_of_completion[_];
}
void __assume_at_id7_of_info(int _){
	info = __d_at_id7_of_info[_];
}
void __assume_at_id7_of_mstatus(int _){
	mstatus = __d_at_id7_of_mstatus[_];
}
void __assume_at_id8_of_data(int _){
	data = __d_at_id8_of_data[_];
}
void __assume_at_id8_of_completion(int _){
	completion = __d_at_id8_of_completion[_];
}
void __assume_at_id8_of_info(int _){
	info = __d_at_id8_of_info[_];
}
void __assume_at_id8_of_mstatus(int _){
	mstatus = __d_at_id8_of_mstatus[_];
}
void __assume_at_id9_of_data(int _){
	data = __d_at_id9_of_data[_];
}
void __assume_at_id9_of_completion(int _){
	completion = __d_at_id9_of_completion[_];
}
void __assume_at_id9_of_info(int _){
	info = __d_at_id9_of_info[_];
}
void __assume_at_id9_of_mstatus(int _){
	mstatus = __d_at_id9_of_mstatus[_];
}
void __assume_at_id10_of_data(int _){
	data = __d_at_id10_of_data[_];
}
void __assume_at_id10_of_completion(int _){
	completion = __d_at_id10_of_completion[_];
}
void __assume_at_id10_of_info(int _){
	info = __d_at_id10_of_info[_];
}
void __assume_at_id10_of_mstatus(int _){
	mstatus = __d_at_id10_of_mstatus[_];
}
void __assume_at_id11_of_data(int _){
	data = __d_at_id11_of_data[_];
}
void __assume_at_id11_of_completion(int _){
	completion = __d_at_id11_of_completion[_];
}
void __assume_at_id11_of_info(int _){
	info = __d_at_id11_of_info[_];
}
void __assume_at_id11_of_mstatus(int _){
	mstatus = __d_at_id11_of_mstatus[_];
}
void __assume_at_id12_of_data(int _){
	data = __d_at_id12_of_data[_];
}
void __assume_at_id12_of_completion(int _){
	completion = __d_at_id12_of_completion[_];
}
void __assume_at_id12_of_info(int _){
	info = __d_at_id12_of_info[_];
}
void __assume_at_id12_of_mstatus(int _){
	mstatus = __d_at_id12_of_mstatus[_];
}
void __reset_data(){
	data = __init_data;
}

void __reset_completion(){
	completion = __init_completion;
}

void __reset_info(){
	info = __init_info;
}

void __reset_mstatus(){
	mstatus = __init_mstatus;
}

		</declaration>
		<location id="id4" x="-442" y="-102">
			<name x="-452" y="-132">id4</name>
		</location>
		<location id="id5" x="-170" y="-102">
			<name x="-180" y="-132">id5</name>
		</location>
		<location id="id6" x="-306" y="-306">
			<name x="-316" y="-336">id6</name>
		</location>
		<location id="id7" x="-374" y="204">
			<name x="-384" y="174">id7</name>
		</location>
		<location id="id8" x="-102" y="204">
			<name x="-112" y="174">id8</name>
		</location>
		<location id="id9" x="34" y="204">
			<name x="24" y="174">id9</name>
		</location>
		<location id="id10" x="34" y="612">
			<name x="24" y="582">id10</name>
		</location>
		<location id="id11" x="-374" y="612">
			<name x="-384" y="582">wait</name>
		</location>
		<location id="id12" x="34" y="408">
			<name x="24" y="378">id12</name>
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id11"/>
			<target ref="id11"/>
			<nail x="-404" y="582"/>
			<nail x="-344" y="582"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id10"/>
			<label kind="guard" x="-26" y="480">id%2==0</label>
			<label kind="synchronisation" x="-26" y="495">share[1+(NA+id-2)%NA][id]?</label>
			<label kind="assignment" x="-26" y="510">mqual=(mqual+shqual)/2,
shqual=0</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id10"/>
			<label kind="guard" x="-26" y="480">id%2==1</label>
			<label kind="synchronisation" x="-26" y="495">share[id][1+id%NA]!</label>
			<label kind="assignment" x="-26" y="510">shqual=mqual</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id7"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id12"/>
			<label kind="guard" x="-26" y="276">id%2==1</label>
			<label kind="synchronisation" x="-26" y="291">share[1+(NA+id-2)%NA][id]?</label>
			<label kind="assignment" x="-26" y="306">mqual=(mqual+shqual)/2,
shqual=0</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id12"/>
			<label kind="guard" x="-26" y="276">id%2==0</label>
			<label kind="synchronisation" x="-26" y="291">share[id][1+id%NA]!</label>
			<label kind="assignment" x="-26" y="306">shqual=mqual</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="select" x="-298" y="159">_:int[0,13]</label>
			<label kind="guard" x="-298" y="174">__d_at_id7_of_info[_] == 1</label>
			<label kind="assignment" x="-298" y="204">mqual=mqual+(mqual&lt;2)</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="select" x="-298" y="159">_:int[0,13]</label>
			<label kind="guard" x="-298" y="174">__d_at_id7_of_info[_] == 0</label>
			<label kind="assignment" x="-298" y="204">mqual=mqual-(mqual&gt;0)</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="select" x="-298" y="159">_:int[0,13]</label>
			<label kind="guard" x="-298" y="174">__d_at_id7_of_info[_] == 2</label>
			<label kind="assignment" x="-298" y="204">mqual=mqual-(mqual&gt;0)</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="select" x="-434" y="159">_:int[0,13]</label>
			<label kind="guard" x="-434" y="174">__d_at_id7_of_info[_]!= 2</label>
			<nail x="-404" y="174"/>
			<nail x="-344" y="174"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id7"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id9"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id4"/>
			<label kind="guard" x="-434" y="-234">impersonated!=0 &amp;&amp;
id!=impersonated</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="select" x="-502" y="-147">_:int[0,2]</label>
			<label kind="guard" x="-502" y="-132">__d_at_id4_of_data[_]!= 2</label>
			<nail x="-472" y="-132"/>
			<nail x="-412" y="-132"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="guard" x="-298" y="-234">impersonated!=0 &amp;&amp;
id!=impersonated</label>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.

system AI, Impersonator;
</system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
